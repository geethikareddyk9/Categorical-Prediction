# -*- coding: utf-8 -*-
"""Final_Categorical_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1do3Yzlo0Lny7bnrVHdlY48ny9QbboEcG
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
train_data = pd.read_csv("/content/drive/MyDrive/ML project/train.csv")
test_data = pd.read_csv("/content/drive/MyDrive/ML project/test.csv")
train_data.head(10)

import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Ridge
from sklearn.linear_model import Lasso
from sklearn.preprocessing import PolynomialFeatures
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor 
from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score

test_data.head(10)

# Check for Null values
train_data.isnull().any()

# Check for Null values
test_data.isnull().any()

import matplotlib.pyplot as plt
import seaborn as sns
plt.figure(figsize=(20,10))
sns.heatmap(train_data.corr(),annot=True,fmt='.3f', )
plt.show()

# create the plot
sns.histplot(train_data["target"])
plt.xlabel("Target Value")
plt.ylabel("Count")
plt.title("Distribution of Target Values")
plt.show()

train_data.info()

# Encode categorical features
encoder = LabelEncoder()
for col in train_data.select_dtypes(include=['object']):
    train_data[col] = encoder.fit_transform(train_data[col])
    test_data[col] = encoder.transform(test_data[col])

train_data.head(10)

test_data.head(10)

# Prepare data for modeling
X_train = train_data.drop(['id', 'target'], axis=1)
y_train = train_data['target']
X_test = test_data.drop('id', axis=1)
scale = StandardScaler().fit(X_train)
X_train_scaled = scale.transform(X_train)

X_train.head(10)

# Fit linear regression model
model = LinearRegression()
model.fit(X_train_scaled, y_train)

# Fit linear regression model
model = LinearRegression()
model.fit(X_train_scaled, y_train)

X_test_scaled = scale.transform(X_test)

# Predict target for test set
y_test_pred = model.predict(X_test_scaled)

# Calculate RMSE
y_train_pred = model.predict(X_train_scaled)
rmselr = mean_squared_error(y_train, y_train_pred, squared=False)
print(f'Training RMSE: {rmselr:.4f}')
linear = r2_score(y_train,y_train_pred)
print(f'r2 score of linear:{linear:.4f}')

# # Fit ridge regression model
# modelr = Ridge()
# modelr.fit(X_train_scaled, y_train)
# X_test_scaled = scale.transform(X_test)

# # Predict target for test set
# y_test_pred = modelr.predict(X_test_scaled)

# # Calculate RMSE
# y_train_pred = modelr.predict(X_train_scaled)
# train_rmser = mean_squared_error(y_train, y_train_pred, squared=False)
# print(f'Training RMSE: {train_rmser:.4f}')
# ridge = r2_score(y_train,y_train_pred)
# print(f'r2 score of ridge:{ridge:.4f}')

# # Fit lasso regression model
# modell = Lasso()
# modell.fit(X_train_scaled, y_train)

# X_test_scaled = scale.transform(X_test)

# # Predict target for test set
# y_test_pred = modell.predict(X_test_scaled)

# # Calculate RMSE
# y_train_pred = model.predict(X_train_scaled)
# train_rmsel = mean_squared_error(y_train, y_train_pred, squared=False)
# print(f'Training RMSE: {train_rmsel:.4f}')
# lasso = r2_score(y_train,y_train_pred)
# print(f'r2 score of lasso:{lasso:.4f}')

# # Fit linear regression model
# modelp = PolynomialFeatures()
# modelp.fit(X_train_scaled, y_train)

# X_test_scaled = scale.transform(X_test)

# # Predict target for test set
# y_test_pred = modelp.predict(X_test_scaled)

# # Calculate RMSE
# y_train_pred = modelp.predict(X_train_scaled)
# train_rmsep = mean_squared_error(y_train, y_train_pred, squared=False)
# print(f'Training RMSE: {train_rmsep:.4f}')
# polynomial = r2_score(y_train,y_train_pred)
# print(f'r2 score of polynomial:{polynomial:.4f}')

# create regressor object
modelra = RandomForestRegressor(n_estimators = 100, random_state = 0)
modelra.fit(X_train_scaled, y_train)

X_test_scaled = scale.transform(X_test)

# Predict target for test set
y_test_pred = modelra.predict(X_test_scaled)

# Calculate RMSE
y_train_pred = modelra.predict(X_train_scaled)
rmsera = mean_squared_error(y_train, y_train_pred, squared=False)
print(f'Training RMSE: {rmsera:.4f}')
Randomforest = r2_score(y_train,y_train_pred)
print(f'r2 score of random:{Randomforest:.4f}')

# # create a regressor object
# modeldt = DecisionTreeRegressor(random_state = 0) 
# modeldt.fit(X_train_scaled, y_train)

# X_test_scaled = scale.transform(X_test)

# # Predict target for test set
# y_test_pred = modeldt.predict(X_test_scaled)

# # Calculate RMSE
# y_train_pred = modeldt.predict(X_train_scaled)
# rmsedt = mean_squared_error(y_train, y_train_pred, squared=False)
# print(f'Training RMSE: {rmsedt:.4f}')
# Decisiontree = r2_score(y_train,y_train_pred)
# print(f'r2 score of random:{Decisiontree:.4f}')

from sklearn.neural_network import MLPRegressor
# create a regressor object
modelmlp =  MLPRegressor()
modelmlp.fit(X_train_scaled, y_train)

X_test_scaled = scale.transform(X_test)

# Predict target for test set
y_test_pred = modelmlp.predict(X_test_scaled)

# Calculate RMSE
y_train_pred = modelmlp.predict(X_train_scaled)
rmsemlp = mean_squared_error(y_train, y_train_pred, squared=False)
print(f'Training RMSE: {rmsemlp:.4f}')
mlp = r2_score(y_train,y_train_pred)
print(f'r2 score of random:{mlp:.4f}')

# save the predictions in the format specified in the sample submission file
submission = pd.read_csv('/content/drive/MyDrive/ML project/sample_submission.csv')
submission['target'] = y_test_pred
submission.to_csv('submission.csv', index=False)
submission.head(20)

# x = [cont1,cont2]
# y = [cat1,cat2,cat3,cat4]

# mymodel = numpy.poly1d(numpy.polyfit(x, y, 3))

# myline = numpy.linspace(1, 22, 100)

# plt.scatter(x, y)
# plt.plot(myline, mymodel(myline))
# plt.show()

models=pd.DataFrame({
    'Model':['Linear Regression','Random Forest','MLP'],
    'RMSE':[rmselr,rmsera,rmsemlp]})
models.sort_values(by='RMSE',ascending=True)

# create the plot
sns.histplot(submission["target"])
plt.xlabel("Target Value")
plt.ylabel("Count")
plt.title("Distribution of Target Values")
plt.show()